Changes for 1.41.12.2, between tag v1.41.12 and git revision
0fb2d1d34660d2d87d2cbf4c81e3715a60ffb11c.

* Fixes a bug in EOFBLOCKS usage
* Adds reserved feature flags
* Do not mark inodes beyond an invalid group itable_unused value
* Allow tune2fs to enable/disable uninit_bg feature without e2fsck

diff --git a/RELEASE-NOTES b/RELEASE-NOTES
index f220c00..c9c8052 100644
--- a/RELEASE-NOTES
+++ b/RELEASE-NOTES
@@ -1,5 +1,5 @@
-E2fsprogs 1.41.12 (May 17, 2010) (Up to commit 517be2d)
-=======================================================
+E2fsprogs 1.41.12 (May 17, 2010)
+================================
 
 Mke2fs now gives a correct error message if the external journal
 device is not found.  (Addresses Red Hat Bug #572935)
diff --git a/debian/changelog b/debian/changelog
index fd9d220..ec254dd 100644
--- a/debian/changelog
+++ b/debian/changelog
@@ -1,3 +1,11 @@
+e2fsprogs (1.41.12-2) unstable; urgency=high
+
+  * Allow tune2fs to set uninit_bg without requiring an fsck
+  * Fix test in e2fsck to correctly check for EOFBLOCKS files
+  * Fix dependencies for libuuid and libblkid (Closes: #583551)
+
+ -- Theodore Y. Ts'o <tytso@mit.edu>  Thu, 03 Jun 2010 09:30:36 -0400
+
 e2fsprogs (1.41.12-1) unstable; urgency=low
 
   * New upstream release
diff --git a/debian/e2fsprogs.shlibs.local b/debian/e2fsprogs.shlibs.local
deleted file mode 100644
index 2c4334d..0000000
--- a/debian/e2fsprogs.shlibs.local
+++ /dev/null
@@ -1,6 +0,0 @@
-libcom_err 2 libcomerr2 (>= 1.34-1)
-libss 2 libss2 (>= 1.34-1)
-libuuid 1 libuuid1 (>= 1.34-1)
-libext2fs 2 e2fslibs (= ${Source-Version})
-libe2p 2 e2fslibs (= ${Source-Version})
-libblkid 1 libblkid1 (>= 1.34-1)
diff --git a/debian/e2fsprogs.shlibs.local.in b/debian/e2fsprogs.shlibs.local.in
new file mode 100644
index 0000000..e858464
--- /dev/null
+++ b/debian/e2fsprogs.shlibs.local.in
@@ -0,0 +1,8 @@
+libcom_err 2 libcomerr2 (>= 1.34-1)
+libss 2 libss2 (>= 1.34-1)
+ifdef(`UTIL_LINUX_NG',,
+``libuuid 1 libuuid1 (>= 1.34-1)
+libblkid 1 libblkid1 (>= 1.34-1)
+'')dnl
+libext2fs 2 e2fslibs (= ${Source-Version})
+libe2p 2 e2fslibs (= ${Source-Version})
diff --git a/debian/rules b/debian/rules
index e36d559..495c857 100755
--- a/debian/rules
+++ b/debian/rules
@@ -167,9 +167,17 @@ else
 M4_ARGS+=-UUTIL_LINUX_NG
 endif
 
+debian-files: debian/control debian/e2fsprogs.shlibs.local
+
+mrproper: clean
+	rm debian/control debian/e2fsprogs.shlibs.local
+
 debian/control: debian/control.in debian/rules
 	m4 $(M4_ARGS) < debian/control.in > $@
 
+debian/e2fsprogs.shlibs.local: debian/e2fsprogs.shlibs.local.in
+	m4 $(M4_ARGS) < debian/e2fsprogs.shlibs.local.in > $@
+
 ${CFGSTDSTAMP}:
 	dh_testdir
 
@@ -321,7 +329,7 @@ install-std: build
 	ln -s et/com_err.h ${tmpdir}/usr/include
 
 	dh_movefiles
-	test -z `find ${tmpdir} -type f`
+	test -z "`find ${tmpdir} -type f`"
 
   # specially-built MIPS libs
 ifneq ($(ismips),)
@@ -599,4 +607,4 @@ endif
 
 binary: binary-indep binary-arch
 
-.PHONY: binary binary-arch binary-indep clean checkroot
+.PHONY: binary binary-arch binary-indep clean checkroot mrproper debian-files
diff --git a/e2fsck/pass1.c b/e2fsck/pass1.c
index c35937f..4bf80d2 100644
--- a/e2fsck/pass1.c
+++ b/e2fsck/pass1.c
@@ -2013,7 +2013,7 @@ static void check_blocks(e2fsck_t ctx, struct problem_context *pctx,
 		 * doesn't need to be.
 		 */
 		if ((inode->i_flags & EXT4_EOFBLOCKS_FL) &&
-		    (size <= (((__u64)pb.last_block + 1) * fs->blocksize))) {
+		    (size >= (((__u64)pb.last_block + 1) * fs->blocksize))) {
 			pctx->blkcount = pb.last_block;
 			if (fix_problem(ctx, PR_1_EOFBLOCKS_FL_SET, pctx)) {
 				inode->i_flags &= ~EXT4_EOFBLOCKS_FL;
diff --git a/lib/ext2fs/ext2_fs.h b/lib/ext2fs/ext2_fs.h
index b022d48..8735105 100644
--- a/lib/ext2fs/ext2_fs.h
+++ b/lib/ext2fs/ext2_fs.h
@@ -50,6 +50,7 @@
 #define EXT2_UNDEL_DIR_INO	 6	/* Undelete directory inode */
 #define EXT2_RESIZE_INO		 7	/* Reserved group descriptors inode */
 #define EXT2_JOURNAL_INO	 8	/* Journal inode */
+#define EXT2_EXCLUDE_INO	 9	/* The "exclude" inode, for snapshots */
 
 /* First non-reserved inode for old ext2 filesystems */
 #define EXT2_GOOD_OLD_FIRST_INO	11
@@ -273,7 +274,11 @@ struct ext2_dx_countlimit {
 #define EXT2_TOPDIR_FL			0x00020000 /* Top of directory hierarchies*/
 #define EXT4_HUGE_FILE_FL               0x00040000 /* Set to each huge file */
 #define EXT4_EXTENTS_FL 		0x00080000 /* Inode uses extents */
+#define EXT4_EA_INODE_FL	        0x00200000 /* Inode used for large EA */
 #define EXT4_EOFBLOCKS_FL		0x00400000 /* Blocks allocated beyond EOF */
+#define EXT4_SNAPFILE_FL		0x01000000  /* Inode is a snapshot */
+#define EXT4_SNAPFILE_DELETED_FL	0x04000000  /* Snapshot is being deleted */
+#define EXT4_SNAPFILE_SHRUNK_FL		0x08000000  /* Snapshot shrink has completed */
 #define EXT2_RESERVED_FL		0x80000000 /* reserved for ext2 lib */
 
 #define EXT2_FL_USER_VISIBLE		0x004BDFFF /* User visible flags */
@@ -462,6 +467,9 @@ struct ext2_inode_large {
 #define EXT2_FLAGS_SIGNED_HASH		0x0001  /* Signed dirhash in use */
 #define EXT2_FLAGS_UNSIGNED_HASH	0x0002  /* Unsigned dirhash in use */
 #define EXT2_FLAGS_TEST_FILESYS		0x0004	/* OK for use on development code */
+#define EXT2_FLAGS_IS_SNAPSHOT		0x0010	/* This is a snapshot image */
+#define EXT2_FLAGS_FIX_SNAPSHOT		0x0020	/* Snapshot inodes corrupted */
+#define EXT2_FLAGS_FIX_EXCLUDE		0x0040	/* Exclude bitmaps corrupted */
 
 /*
  * Mount flags
@@ -581,7 +589,12 @@ struct ext2_super_block {
 	__u8    s_reserved_char_pad;
 	__u16	s_reserved_pad;		/* Padding to next 32bits */
 	__u64	s_kbytes_written;	/* nr of lifetime kilobytes written */
-	__u32   s_reserved[160];        /* Padding to the end of the block */
+	__u32	s_snapshot_inum;	/* Inode number of active snapshot */
+	__u32	s_snapshot_id;		/* sequential ID of active snapshot */
+	__u64	s_snapshot_r_blocks_count; /* reserved blocks for active
+					      snapshot's future use */
+	__u32	s_snapshot_list;	/* inode number of the head of the on-disk snapshot list */
+	__u32   s_reserved[155];        /* Padding to the end of the block */
 };
 
 /*
@@ -627,6 +640,7 @@ struct ext2_super_block {
 #define EXT2_FEATURE_COMPAT_RESIZE_INODE	0x0010
 #define EXT2_FEATURE_COMPAT_DIR_INDEX		0x0020
 #define EXT2_FEATURE_COMPAT_LAZY_BG		0x0040
+#define EXT2_FEATURE_COMPAT_EXCLUDE_INODE	0x0080
 
 #define EXT2_FEATURE_RO_COMPAT_SPARSE_SUPER	0x0001
 #define EXT2_FEATURE_RO_COMPAT_LARGE_FILE	0x0002
@@ -635,6 +649,7 @@ struct ext2_super_block {
 #define EXT4_FEATURE_RO_COMPAT_GDT_CSUM		0x0010
 #define EXT4_FEATURE_RO_COMPAT_DIR_NLINK	0x0020
 #define EXT4_FEATURE_RO_COMPAT_EXTRA_ISIZE	0x0040
+#define EXT4_FEATURE_RO_COMPAT_HAS_SNAPSHOT	0x0080
 
 #define EXT2_FEATURE_INCOMPAT_COMPRESSION	0x0001
 #define EXT2_FEATURE_INCOMPAT_FILETYPE		0x0002
@@ -645,6 +660,8 @@ struct ext2_super_block {
 #define EXT4_FEATURE_INCOMPAT_64BIT		0x0080
 #define EXT4_FEATURE_INCOMPAT_MMP		0x0100
 #define EXT4_FEATURE_INCOMPAT_FLEX_BG		0x0200
+#define EXT4_FEATURE_INCOMPAT_EA_INODE		0x0400
+#define EXT4_FEATURE_INCOMPAT_DIRDATA		0x1000
 
 
 #define EXT2_FEATURE_COMPAT_SUPP	0
diff --git a/lib/ext2fs/fiemap.h b/lib/ext2fs/fiemap.h
index 934e22d..671decb 100644
--- a/lib/ext2fs/fiemap.h
+++ b/lib/ext2fs/fiemap.h
@@ -11,8 +11,6 @@
 #ifndef _LINUX_FIEMAP_H
 #define _LINUX_FIEMAP_H
 
-#include <linux/types.h>
-
 struct fiemap_extent {
 	__u64 fe_logical;  /* logical offset in bytes for the start of
 			    * the extent from the beginning of the file */
diff --git a/misc/tune2fs.c b/misc/tune2fs.c
index 41a0638..4be8542 100644
--- a/misc/tune2fs.c
+++ b/misc/tune2fs.c
@@ -326,14 +326,28 @@ static void update_mntopts(ext2_filsys fs, char *mntopts)
 	ext2fs_mark_super_dirty(fs);
 }
 
+static void request_fsck_afterwards(ext2_filsys fs)
+{
+	static int requested = 0;
+
+	if (requested++)
+		return;
+	fs->super->s_state &= ~EXT2_VALID_FS;
+	printf("\n%s\n", _(please_fsck));
+	if (mount_flags & EXT2_MF_READONLY)
+		printf(_("(and reboot afterwards!)\n"));
+}
+
 /*
  * Update the feature set as provided by the user.
  */
 static void update_feature_set(ext2_filsys fs, char *features)
 {
 	struct ext2_super_block *sb = fs->super;
+	struct ext2_group_desc *gd;
+	errcode_t	retval;
 	__u32		old_features[3];
-	int		type_err;
+	int		i, type_err;
 	unsigned int	mask_err;
 
 #define FEATURE_ON(type, mask) (!(old_features[(type)] & (mask)) && \
@@ -430,6 +444,36 @@ static void update_feature_set(ext2_filsys fs, char *features)
 		}
 	}
 
+	if (FEATURE_ON(E2P_FEATURE_RO_INCOMPAT,
+		       EXT4_FEATURE_RO_COMPAT_GDT_CSUM)) {
+		gd = fs->group_desc;
+		for (i = 0; i < fs->group_desc_count; i++, gd++) {
+			gd->bg_itable_unused = 0;
+			gd->bg_flags = EXT2_BG_INODE_ZEROED;
+			ext2fs_group_desc_csum_set(fs, i);
+		}
+		fs->flags &= ~EXT2_FLAG_SUPER_ONLY;
+	}
+
+	if (FEATURE_OFF(E2P_FEATURE_RO_INCOMPAT,
+			EXT4_FEATURE_RO_COMPAT_GDT_CSUM)) {
+		gd = fs->group_desc;
+		for (i = 0; i < fs->group_desc_count; i++, gd++) {
+			if ((gd->bg_flags & EXT2_BG_INODE_ZEROED) == 0) {
+				/* 
+				 * XXX what we really should do is zap
+				 * uninitialized inode tables instead.
+				 */
+				request_fsck_afterwards(fs);
+				break;
+			}
+			gd->bg_itable_unused = 0;
+			gd->bg_flags = 0;
+			gd->bg_checksum = 0;
+		}
+		fs->flags &= ~EXT2_FLAG_SUPER_ONLY;
+	}
+
 	if (sb->s_rev_level == EXT2_GOOD_OLD_REV &&
 	    (sb->s_feature_compat || sb->s_feature_ro_compat ||
 	     sb->s_feature_incompat))
@@ -437,8 +481,6 @@ static void update_feature_set(ext2_filsys fs, char *features)
 
 	if (FEATURE_CHANGED(E2P_FEATURE_RO_INCOMPAT,
 			    EXT2_FEATURE_RO_COMPAT_SPARSE_SUPER) ||
-	    FEATURE_CHANGED(E2P_FEATURE_RO_INCOMPAT,
-			    EXT4_FEATURE_RO_COMPAT_GDT_CSUM) ||
 	    FEATURE_OFF(E2P_FEATURE_RO_INCOMPAT,
 			EXT4_FEATURE_RO_COMPAT_HUGE_FILE) ||
 	    FEATURE_CHANGED(E2P_FEATURE_INCOMPAT,
@@ -446,12 +488,8 @@ static void update_feature_set(ext2_filsys fs, char *features)
 	    FEATURE_CHANGED(E2P_FEATURE_COMPAT,
 			    EXT2_FEATURE_COMPAT_RESIZE_INODE) ||
 	    FEATURE_OFF(E2P_FEATURE_RO_INCOMPAT,
-			EXT2_FEATURE_RO_COMPAT_LARGE_FILE)) {
-		sb->s_state &= ~EXT2_VALID_FS;
-		printf("\n%s\n", _(please_fsck));
-		if (mount_flags & EXT2_MF_READONLY)
-			printf(_("(and reboot afterwards!)\n"));
-	}
+			EXT2_FEATURE_RO_COMPAT_LARGE_FILE))
+		request_fsck_afterwards(fs);
 
 	if ((old_features[E2P_FEATURE_COMPAT] != sb->s_feature_compat) ||
 	    (old_features[E2P_FEATURE_INCOMPAT] != sb->s_feature_incompat) ||
